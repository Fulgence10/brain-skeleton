class Particule{constructor({x:a=0,y:b=0,vx:c=0,vy:d=0,radius:e=2,color:f="#fff",alpha:g=1}){this.x=a,this.y=b,this.vx=c,this.vy=d,this.color=f,this.radius=e,this.alpha=g,this.baseX=this.x,this.baseY=this.y,this.density=40*Math.random()+5}draw(a){a.save(),a.globalAlpha=this.alpha,a.fillStyle=this.color,a.beginPath(),a.arc(this.x,this.y,this.radius,0,2*Math.PI),a.closePath(),a.fill(),a.restore()}update(a,b){this.x+=this.vx,this.y+=this.vy,(this.x+this.radius>=a||this.x<=0)&&(this.vx*=-1),(this.y+this.radius>=b||this.y<=0)&&(this.vy*=-1)}}export default class a{constructor(a,b,c){this.ctx=a.getContext("2d"),this.width=b,this.height=c,a.width=b,a.height=c}generateRandomParticules(d=10,a={}){let b=[];a=Object.assign({x:0,y:0,radius:2,color:"#fff",alpha:1,vx:0,vy:0},a);for(let c=0;c<d;c++)b.push(new Particule({radius:a.radius,color:a.color,alpha:a.alpha,x:Math.random()*this.width,y:Math.random()*this.height,vx:(Math.random()-.5)*(Math.random()*a.vx),vy:(Math.random()-.5)*(Math.random()*a.vy)}));return b}generateParticulesFromText(g="Brain",a={}){a=Object.assign({adjustX:0,adjustY:0,font:"Verdana",size:10,particule:{}},a),this.ctx.font=`30px ${a.font}`,this.ctx.fillText(g,0,30);let b=this.ctx.getImageData(0,0,this.width,this.height),f=[],e=a.particule;this.ctx.clearRect(0,0,this.width,this.height);for(let c=0,h=b.height;c<h;c++)for(let d=0,i=b.width;d<i;d++){let j=4*c*b.width+4*d+3;b.data[j]>10&&(e.x=(d+a.adjustX)*a.size,e.y=(c+a.adjustY)*a.size,f.push(new Particule(e)))}return f}animate(b,a=60){let c=1e3/a,d=window.performance.now();this.main=a=>{requestAnimationFrame(this.main.bind(this)),a-d>c&&(this.ctx.clearRect(0,0,this.width,this.height),b.call())},this.main()}drawParticule(b){for(let a=0;a<b.length;a++)b[a].draw(this.ctx),b[a].update(this.width,this.height)}connecteParticule(a=[],f=80,g="#fff",h=1,i=.2){for(let b=0;b<a.length;b++)for(let c=b;c<a.length;c++){let d=a[b].x-a[c].x,e=a[b].y-a[c].y;Math.sqrt(d*d+e*e)<f&&(this.ctx.save(),this.ctx.globalAlpha=h,this.ctx.strokeStyle=g,this.ctx.lineWidth=i,this.ctx.beginPath(),this.ctx.moveTo(a[b].x,a[b].y),this.ctx.lineTo(a[c].x,a[c].y),this.ctx.closePath(),this.ctx.stroke(),this.ctx.restore())}}desintegre(b=[],h=0,i=0,d=200){for(let a=0;a<b.length;a++){let e=h-b[a].x,f=i-b[a].y,c=Math.sqrt(e*e+f*f),j=e/c,k=f/c,g=(d-c)/d,l=j*g*b[a].density,m=k*g*b[a].density;c<d?(b[a].x-=l,b[a].y-=m):(b[a].x!==b[a].baseX&&(b[a].x-=(b[a].x-b[a].baseX)/10),b[a].y!==b[a].baseY&&(b[a].y-=(b[a].y-b[a].baseY)/10))}}}
